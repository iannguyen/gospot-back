c
params
c
token
c
n
token
n
user
n
c
user
c
token
c
n
params
user
c
request.headers['X-CSRF-TOKEN']
c
super
request.headers['X-XSRF-TOKEN']
c
cc
c
n
c
request.headers['token']
request.headers[token]
request.headers
session
params
super
c
super
request.headers['X-CSRF-TOKEN']
request.headers[
c
n
params
user
c
n
user
c
request.headers['X-XSRF-TOKEN']
c
cookies['XSRF-TOKEN']
cookies
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
super
c
authenticate_user!
super
request.headers['X-XSRF-TOKEN']
c
C
request.headers['CSRF-TOKEN']
request.headers['XSRF-TOKEN']
request.headers['X-XSRF-TOKEN']
request.headers
request
c
c3
c
session
request.headers['X-XSRF-TOKEN']
c
C
request.headers['X-XSRF-TOKEN']
request.headers[
super
c
cc
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
session
super
c
form_authenticity_token
cookies['XSRF-TOKEN']
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
super
c
protect_against_forgery?
cookies['XSRF-TOKEN']
c
C
request.headers['X-XSRF-TOKEN']
super
c
C
cookies['XSRF-TOKEN']
cookies['XSRF-TOKEN'
cookies
c
C
request.headers['X-XSRF-TOKEN']
request.headers
request
super
c
n
user
c
n
c
user
c
user
c
user
c
n
user
ladksfjldsakfj!
authenticate_user!
c
user
c
user
c
current_user
c
User.find_by(authentication_token:token)
c
User.find_by(authentication_token: token)
token
User.find_by(authnetication_token: token)
c
n
n'
token
ustoken
user
n
user.authentication_token
c
n
Devise.secure_compare(user.authentication_token, token)
user.authentication_token
token
user
n
User.find_by_email(user_email)
User.find_by_email(user_email
user_email
user
n
options[:email].presence
options
user.token
token
c
user.authentication_token
token
Devise.secure_compare(user.authentication_token, token)
user
c
n
user
exit
user
c
params
c
params[:user]
params
c
params
c
skin_params
c
signed_in_user
@current_user
current_user
c
super.merge(skins: object.skins)
c
exit
user_payout.save
user_payout.skins
user_payout
user_payout.skins += user_profit
user_payout.skins
user_payout
c
current_user.payouts.skins
current_user.payouts
current_user
c
n
protect_from_forgery
c
payout_table.skins_hash
payout_table.winners.first[1][:payout].skins
payout_table.winners.first[1][:payout]
payout_table.winners.first[1]
payout_table.winners.first
payout_table.winners
exit
idx
ids
@profits
user_profit
c
@max
max
n
exit
@profits.first.round
@profits.first
@profits
@max
n
exit
@max
prices
n
@skins
@profits
@payouts
exit
loser_skins
c
bet.skins
exit
winning_team_bets
bets_to_destroy
exit
winning_team_bets
bets_to_destroy
exit
winning_team_bets_ids
winning_team_bet_ids
exit
winning_team_bets
c
exit
skins
n
skins
bet.skins
bet
c
exit
skins
a
skins
skins.sort_by { |skin| skin.price }
