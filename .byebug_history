c
;2Dx
c
n
game.bets
game
exit
xit
ian
game.team_1
game
n
exit
@site_rake
site_profit
exit
ian.skins
exit
xit
Match.all
Match.find(1)
match
exit
bet1
c
exit
xit
game.team_1
game.total
exit
Bet.all
game.bets
ian.bets
ian.total
ian.skins
ian
game.total
0/0
game.team_1.total
game.team_1_odds
c
game.distribute
game.total
game
c
n
c
match
c
n
match.total
match
exit
match
exit
match
total
match
exit
site_rake
c
n
user
c
n
users
exit
users
skins[0].dup
skins[0]
skins
c
params
c
token
c
n
token
n
user
n
c
user
c
token
c
n
params
user
c
request.headers['X-CSRF-TOKEN']
c
super
request.headers['X-XSRF-TOKEN']
c
cc
c
n
c
request.headers['token']
request.headers[token]
request.headers
session
params
super
c
super
request.headers['X-CSRF-TOKEN']
request.headers[
c
n
params
user
c
n
user
c
request.headers['X-XSRF-TOKEN']
c
cookies['XSRF-TOKEN']
cookies
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
super
c
authenticate_user!
super
request.headers['X-XSRF-TOKEN']
c
C
request.headers['CSRF-TOKEN']
request.headers['XSRF-TOKEN']
request.headers['X-XSRF-TOKEN']
request.headers
request
c
c3
c
session
request.headers['X-XSRF-TOKEN']
c
C
request.headers['X-XSRF-TOKEN']
request.headers[
super
c
cc
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
session
super
c
form_authenticity_token
cookies['XSRF-TOKEN']
c
valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
request.headers['X-XSRF-TOKEN']
super
c
protect_against_forgery?
cookies['XSRF-TOKEN']
c
C
request.headers['X-XSRF-TOKEN']
super
c
C
cookies['XSRF-TOKEN']
cookies['XSRF-TOKEN'
cookies
c
C
request.headers['X-XSRF-TOKEN']
request.headers
request
super
c
n
user
c
n
c
user
c
user
c
user
c
n
user
ladksfjldsakfj!
authenticate_user!
c
user
c
user
c
current_user
c
User.find_by(authentication_token:token)
c
User.find_by(authentication_token: token)
token
User.find_by(authnetication_token: token)
c
n
n'
token
ustoken
user
n
user.authentication_token
c
n
Devise.secure_compare(user.authentication_token, token)
user.authentication_token
token
user
n
User.find_by_email(user_email)
User.find_by_email(user_email
user_email
user
n
options[:email].presence
options
user.token
token
c
user.authentication_token
token
Devise.secure_compare(user.authentication_token, token)
user
c
n
user
exit
user
c
params
c
params[:user]
params
c
params
c
skin_params
c
signed_in_user
@current_user
current_user
c
super.merge(skins: object.skins)
c
